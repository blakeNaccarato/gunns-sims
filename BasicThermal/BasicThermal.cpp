/**
@attention  Notices

@file  BasicThermal.cpp
@brief BasicThermal GUNNS Basic Network implementation.

LIBRARY DEPENDENCY:
(
  (core/GunnsBasicCapacitor.o)
  (core/GunnsBasicConductor.o)
  (core/GunnsBasicPotential.o)
  (core/network/GunnsNetworkBase.o)
)

PROGRAMMERS:
  ((Auto-generated by the GunnsDraw netexport script version 19.3.7) (2022-08-22 00:54:36.513546))
*/

#include "BasicThermal.hh"
#include "simulation/hs/TsHsMsg.hh"
#include "software/exceptions/TsInitializationException.hh"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] name    (--) Name of the network for H&S messages.
/// @param[in] network (--) Pointer to the main network object.
/// 
/// @details  Default constructs the BasicThermal Network Config Data.
////////////////////////////////////////////////////////////////////////////////////////////////////
BasicThermalConfigData::BasicThermalConfigData(const std::string& name, BasicThermal* network)
    :
    netSolver(name + ".netSolver", 0.001, 1.0e-8, 1, 1),
    // Spotter Config Data
    // Link Config Data
    potential(name + ".potential", &network->netNodeList, 0.0),
    capacitor(name + ".capacitor", &network->netNodeList),
    conductor(name + ".conductor", &network->netNodeList, 0.0)
{
    // Load config data vectors
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default destructs the BasicThermal Network Config Data.
////////////////////////////////////////////////////////////////////////////////////////////////////
BasicThermalConfigData::~BasicThermalConfigData()
{
    // Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] network (--) Pointer to the main network object.
///
/// @details  Default constructs the BasicThermal Network Input Data.
////////////////////////////////////////////////////////////////////////////////////////////////////
BasicThermalInputData::BasicThermalInputData(BasicThermal* network)
    :
    // Spotter Input Data
    // Link Input Data
    potential(false, 0.0, 0.0),
    capacitor(false, 0.0, 0.0, 0.0),
    conductor(false, 0.0)
{
    // Load input data vectors
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default destructs the BasicThermal Network Input Data.
////////////////////////////////////////////////////////////////////////////////////////////////////
BasicThermalInputData::~BasicThermalInputData()
{
    // Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] name (--) Name of the network for H&S messages.
///
/// @details  Default constructs the BasicThermal Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
BasicThermal::BasicThermal(const std::string& name)
    :
    GunnsNetworkBase(name, N_NODES, netNodes),
    netNodes(),
    netConfig(name, this),
    netInput(this),
    // Data Tables 
    // Spotters
    // Links
    potential(),
    capacitor(),
    conductor()
{
    // Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details Default destructs the BasicThermal Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
BasicThermal::~BasicThermal()
{
    // Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] name (--) Name of the network for H&S messages.
///
/// @details  Initializes the nodes with their config and input data objects.  The nodes are
///           initialized through the node list object, which may point to this network's nodes
///           (when this is a standalone network), or the super-network's nodes (as a sub-network).
////////////////////////////////////////////////////////////////////////////////////////////////////
void BasicThermal::initNodes(const std::string& name)
{
    /// - Initialize the nodes.
    netNodeList.mNodes[0 + netSuperNodesOffset].initialize(name + createNodeName(0 + netSuperNodesOffset), 0.0);
    netNodeList.mNodes[1 + netSuperNodesOffset].initialize(name + createNodeName(1 + netSuperNodesOffset), 0.0);
    netNodeList.mNodes[2 + netSuperNodesOffset].initialize(name + createNodeName(2 + netSuperNodesOffset), 0.0);
    /// - Only init the Ground node if this is not a sub-network.
    if (!netIsSubNetwork) {
        netNodeList.mNodes[3].initialize(name + ".GROUND");
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Initializes this network's links, spotters and solver with their config and input data
///           objects.
////////////////////////////////////////////////////////////////////////////////////////////////////
void BasicThermal::initNetwork()
{
    const int groundOffset = netNodeList.mNumNodes - N_NODES;

    /// - Register sockets with the jumper plugs.

    /// - Initialize the links.
    netLinks.clear();
    potential.initialize(netConfig.potential, netInput.potential, netLinks, Node1 + netSuperNodesOffset, Node0 + netSuperNodesOffset);
    capacitor.initialize(netConfig.capacitor, netInput.capacitor, netLinks, Node2 + netSuperNodesOffset, Node1 + netSuperNodesOffset);
    conductor.initialize(netConfig.conductor, netInput.conductor, netLinks, Node0 + netSuperNodesOffset, Node2 + netSuperNodesOffset);

    /// - Initialize the spotters.

    /// - Initialize the solver, only if this is not a sub-network.
    if (!netIsSubNetwork) {
        netSolver.initializeNodes(netNodeList);
        netSolver.initialize(netConfig.netSolver, netLinks);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] timeStep (s) Integration time step.
///
/// @details  Updates this network's spotters before solving the network.
////////////////////////////////////////////////////////////////////////////////////////////////////
void BasicThermal::stepSpottersPre(const double timeStep)
{
    /// - Step network spotters prior to solver step.
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in]   timeStep (s) Integration time step.
///
/// @details  Updates this network's spotters after solving the network.
////////////////////////////////////////////////////////////////////////////////////////////////////
void BasicThermal::stepSpottersPost(const double timeStep)
{
    /// - Step network spotters after solver step.
}
